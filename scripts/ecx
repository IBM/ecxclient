#!/usr/bin/env python
#-*- mode: Python;-*-

import ConfigParser
import json
import os
import sys
import traceback

script_dir = os.path.dirname(os.path.abspath(sys.argv[0]))
dependencies_dir = os.path.join(script_dir, "..", "dependencies")

sys.path.insert(0, os.path.join(dependencies_dir, "click"))
sys.path.insert(0, os.path.join(dependencies_dir, "requests"))

import click
import requests
from requests.auth import HTTPBasicAuth

def remove_links(obj):
    if type(obj) is dict:
        if obj.has_key("links"):
            del obj["links"]

        for k, v in obj.iteritems():
            remove_links(v)

        return

    if type(obj) is list:
        for item in obj:
            remove_links(item)

        return

    return

def raise_response_error(r, *args, **kwargs):
    r.raise_for_status()
    obj = json.loads(r.content)
    remove_links(obj)
    r.resp_without_links = obj

class EcxSession(object):
    def __init__(self, url, username, password, verbose):
        self.url = url
        self.username = username
        self.password = password
        self.verbose = verbose
        self.sessionid = None
        self.cfgfile = os.path.join(click.get_app_dir("ecxcli"), 'config.ini')
        self.cfgdir = os.path.dirname(self.cfgfile)
        if not os.path.exists(self.cfgdir):
            os.makedirs(self.cfgdir)

        self.conn = requests.Session()
        self.conn.verify = False
        self.conn.hooks.update({'response': raise_response_error})

        if self.password is None:
            self.use_existing_session()
        else:
            self.login()

        self.conn.headers.update({'X-Endeavour-Sessionid': self.sessionid})

    def use_existing_session(self):
        parser = ConfigParser.RawConfigParser()
        parser.read([self.cfgfile])

        try:
            self.sessionid = parser.get(self.username, 'sessionid')
        except ConfigParser.NoSectionError:
            raise Exception('Please provide login credentials.')

    def login(self):
        r = self.conn.post("%s/api/endeavour/session" % self.url, auth=HTTPBasicAuth(self.username, self.password))
        self.sessionid = r.json()['sessionid']
        self.save_config()

    def save_config(self):
        parser = ConfigParser.RawConfigParser()
        parser.add_section(self.username)
        parser.set(self.username, 'password', self.password)
        parser.set(self.username, 'sessionid', self.sessionid)

        parser.write(open(self.cfgfile, 'wb'))

    def __repr__(self):
        return 'EcxSession: user: %s' % self.username

pass_ecx_session = click.make_pass_decorator(EcxSession)

class EcxCmd(object):
    def __init__(self, *args, **kwargs):
        self.ecx_session = kwargs.pop('ecx_session')
        super(EcxCmd, self).__init__()

    def invoke_get(self, url):
        r = self.ecx_session.conn.get(url)
        click.echo_via_pager(json.dumps(r.resp_without_links, indent=4))

class UserCmd(EcxCmd):
    def __init__(self, *args, **kwargs):
        super(UserCmd, self).__init__(*args, **kwargs)

    def list(self, **kwargs):
        self.invoke_get("%s/api/security/user" % self.ecx_session.url)

class IdentityCmd(EcxCmd):
    def __init__(self, *args, **kwargs):
        super(IdentityCmd, self).__init__(*args, **kwargs)

    def list(self, **kwargs):
        self.invoke_get("%s/api/identity/user" % self.ecx_session.url)

@click.group()
@click.option('--url', envvar='ECX_URL', default='http://localhost:8082', metavar='URL', help='ECX url.')
@click.option('--user', envvar='ECX_USER', default='admin', metavar='USERNAME', help='ECX user.')
@click.option('--passwd', envvar='ECX_PASSWD', default=None, metavar='PASSWORD', help='ECX password.')
@click.option('--verbose', '-v', is_flag=True, help='Enables verbose mode.')
@click.version_option('1.0')
@click.pass_context
def cli(ctx, url, user, passwd, verbose):
    """ecx is a command line tool with which ECX operations
    can be carried out.
    """

    ctx.obj = EcxSession(url, user, passwd, verbose)

@cli.command()
@click.argument('op')
@click.pass_obj
def user(ecx_session, **kwargs):
    """User resource.
    """

    getattr(UserCmd(ecx_session=ecx_session), kwargs['op'])(**kwargs)

@cli.command()
@click.argument('op')
@click.pass_obj
def identity(ecx_session, **kwargs):
    """Identity resource.
    """

    getattr(IdentityCmd(ecx_session=ecx_session), kwargs['op'])(**kwargs)

if __name__ == '__main__':
    try:
        cli()
    except Exception as e:
        traceback.print_exc()

        click.secho(str(e), fg='red')
